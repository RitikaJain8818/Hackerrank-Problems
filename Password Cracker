#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;
int N;

int dictionaryContains(string word,string dictionary[])
{
	//string dictionary[] = {"because","can","do","must","we","what"};
	//int size = sizeof(dictionary)/sizeof(dictionary[0]);
   
	for (int i = 0; i < N; i++)
		if (dictionary[i].compare(word) == 0)
		return true;
	return false;
}
bool wordBreak(string str,string result,string dic[])
{
	int size = str.size();

	// Base case
	if (size == 0) return true;

	// Try all prefixes of lengths from 1 to size
	for (int i=1; i<=size; i++)
	{string prefix = str.substr(0, i);
		
     
		if (dictionaryContains( str.substr(0, i),dic ) &&
			wordBreak( str.substr(i, size-i),result + prefix + " ",dic )){
			     if (i == size)
            {
                // add this element to previous prefix
                result += prefix;
               cout << result << endl; //print result
                
            }
			return true;
			}
	}

	// If we have tried all prefixes and none of them worked
	return false;
}
 
int main() {
     int T,i;
    cin>>T;
    string str;
    while(T--) {
        cin>>N;
        string dic[N];
        for(i=0;i<N;i++)
            cin>>dic[i];
        cin>>str;
    
        wordBreak(str,"",dic)?:cout<<"WRONG PASSWORD\n";
        //cout<<endl;
    }
    return 0;
}
